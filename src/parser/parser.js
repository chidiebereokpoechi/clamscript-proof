/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,20],$V2=[1,40],$V3=[1,45],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,35],$Va=[1,69],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,32],$Vh=[1,33],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,39],$Vm=[1,41],$Vn=[1,52],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,51],$Vs=[1,53],$Vt=[5,15,23,24,25,29,30,31,34,35,37,38,46,47,48,50,51,52,53,54,55,56,57,58,59,67,69,70,71,93,98],$Vu=[5,15,23,24,25,29,30,31,33,34,35,37,38,46,47,48,50,51,52,53,54,55,56,57,58,59,67,69,70,71,93,98],$Vv=[1,79],$Vw=[1,82],$Vx=[1,87],$Vy=[1,89],$Vz=[1,88],$VA=[1,90],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[1,97],$VI=[1,98],$VJ=[1,99],$VK=[1,100],$VL=[1,101],$VM=[27,28,36,38,42,43,68,71,84,85,86,87,88,89,90,91,92,94,95,96,97],$VN=[38,42,71,84,85,86,87,88,89,90,91,92,94,95,96,97],$VO=[2,52],$VP=[28,38],$VQ=[2,64],$VR=[1,122],$VS=[1,125],$VT=[1,150],$VU=[27,28,68],$VV=[27,28],$VW=[2,23],$VX=[1,156],$VY=[27,28,36,38,43,68,71,84,87,88,89,90,91,92,94,95,96,97],$VZ=[27,28,36,38,43,68,71,84,85,86,87,88,89,90,91,92,94,95,96,97],$V_=[27,28,36,38,43,68,87,88,89,90,91,92,94,95,96,97],$V$=[27,28,36,38,43,68,87,88,94,95],$V01=[27,28,38],$V11=[2,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statement_list":4,"EOF":5,"statement":6,"function_statement":7,"compound_statement":8,"conditional_statement":9,"while_loop_statement":10,"from_loop_statement":11,"return_statement":12,"print_statement":13,"declaration_statement":14,"list_assignment_statement":15,"release_statement":16,"expression_statement":17,"exit_statement":18,"skip_statement":19,"assign_statement":20,"no_op_statement":21,"comment":22,"function":23,"IDENTIFIER":24,"(":25,"identifier_list":26,")":27,",":28,":":29,"end":30,"if":31,"expression":32,"else":33,"while":34,"from":35,"to":36,"return":37,".":38,"assignment":39,"=":40,"list_assignment":41,"[":42,"]":43,"assignment_list":44,"run_expression":45,"run":46,"print":47,"reserve":48,"declaration_list":49,"allocate":50,"free":51,"delete":52,"exit":53,"skip":54,"COMMENT":55,"INTEGER":56,"STRING_LITERAL":57,"EMPTY":58,"BOOLEAN":59,"length_expression":60,"list_definition_expression":61,"list_access_expression":62,"function_call_expression":63,"binary_expression":64,"unary_expression":65,"expression_list":66,"{":67,"}":68,"not":69,"!":70,"-":71,"addition_expression":72,"subtraction_expression":73,"multiplication_expression":74,"division_expression":75,"logic_and_expression":76,"logic_or_expression":77,"equal_to_expression":78,"not_equal_to_expression":79,"less_than":80,"greater_than":81,"less_than_or_equal_to_expression":82,"greater_than_or_equal_to_expression":83,"+":84,"*":85,"/":86,"and":87,"or":88,"==":89,"is":90,"!=":91,"isnot":92,"len":93,"<":94,">":95,"<=":96,">=":97,"call":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"list_assignment_statement",23:"function",24:"IDENTIFIER",25:"(",27:")",28:",",29:":",30:"end",31:"if",33:"else",34:"while",35:"from",36:"to",37:"return",38:".",40:"=",42:"[",43:"]",46:"run",47:"print",48:"reserve",50:"allocate",51:"free",52:"delete",53:"exit",54:"skip",55:"COMMENT",56:"INTEGER",57:"STRING_LITERAL",58:"EMPTY",59:"BOOLEAN",67:"{",68:"}",69:"not",70:"!",71:"-",84:"+",85:"*",86:"/",87:"and",88:"or",89:"==",90:"is",91:"!=",92:"isnot",93:"len",94:"<",95:">",96:"<=",97:">=",98:"call"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,6],[26,3],[26,1],[26,0],[8,3],[9,5],[9,7],[10,5],[11,9],[12,3],[39,3],[39,1],[41,6],[44,3],[44,1],[45,4],[20,2],[13,5],[14,3],[14,3],[49,3],[49,1],[16,3],[16,3],[17,2],[18,2],[19,2],[21,1],[22,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3],[32,1],[32,1],[32,1],[32,1],[66,3],[66,1],[66,0],[61,3],[62,4],[65,4],[65,4],[65,2],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[72,3],[73,3],[74,3],[75,3],[76,3],[77,3],[78,3],[78,3],[79,3],[79,3],[60,4],[80,3],[81,3],[82,3],[83,3],[63,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 3: case 22: case 34: case 41: case 63:
 this.$ = [$$[$0]] 
break;
case 20:
 this.$ = { type: 'FUNCTION_DEF', name: $$[$0-4], args: $$[$0-2], body: $$[$0] } 
break;
case 21: case 33: case 40: case 62:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 24: case 36: case 44: case 57:
 this.$ = $$[$0-1] 
break;
case 25:
 this.$ = { type: 'CONDITIONAL', expression: $$[$0-2], main: $$[$0] } 
break;
case 26:
 this.$ = { type: 'CONDITIONAL', expression: $$[$0-4], main: $$[$0-2], alt: $$[$0] } 
break;
case 27:
 this.$ = { type: 'WHILE_LOOP', expression: $$[$0-2], body: $$[$0] } 
break;
case 28:
 this.$ = { type: 'FROM_LOOP', counter: $$[$0-6], lower: $$[$0-4], upper: $$[$0-2], body: $$[$0] } 
break;
case 29:
 this.$ = { type: 'RETURN', expression: $$[$0-1] } 
break;
case 30:
 this.$ = { type: 'ASSIGNMENT', name: $$[$0-2], expression: $$[$0] } 
break;
case 31: case 54: case 55: case 56:
 this.$ = $$[$0] 
break;
case 32:
 this.$ = { type: 'LIST_ASSIGNMENT', list: $$[$0-5], index: $$[$0-3], value: $$[$0] } 
break;
case 35:
 this.$ = { type: 'RUN', expression: $$[$0-1] } 
break;
case 37:
 this.$ = { type: 'PRINT', expression: $$[$0-2] } 
break;
case 38: case 39:
 this.$ = { type: 'RESERVE', variableNames: $$[$0-1] } 
break;
case 42: case 43:
 this.$ = { type: 'FREE', name: $$[$0-1] } 
break;
case 45:
 this.$ = { type: 'EXIT' } 
break;
case 46:
 this.$ = { type: 'SKIP' } 
break;
case 49:
 this.$ = { type: 'INTEGER', value: parseInt(yytext) } 
break;
case 50:
 this.$ = { type: 'STRING', value: yytext } 
break;
case 51:
 this.$ = { type: 'EMPTY' } 
break;
case 52:
 this.$ = { type: 'IDENTIFIER', name: yytext } 
break;
case 53:
 this.$ = { type: 'BOOLEAN', value: Boolean(eval(yytext)) } 
break;
case 65:
 this.$ = { type: 'LIST_DEF', body: $$[$0-1] } 
break;
case 66:
 this.$ = { type: 'LIST_ACCESS', list: $$[$0-3], index: $$[$0-1] } 
break;
case 67: case 68:
 this.$ = { type: 'NOT', expression: $$[$0-1] } 
break;
case 69:
 this.$ = { type: 'INTEGER', value: -1 * parseInt($$[$0]) } 
break;
case 82:
 this.$ = { type: "ADDITION", left: $$[$0-2], right: $$[$0] } 
break;
case 83:
 this.$ = { type: "SUBTRACTION", left: $$[$0-2], right: $$[$0] } 
break;
case 84:
 this.$ = { type: "MULTIPLICATION", left: $$[$0-2], right: $$[$0] } 
break;
case 85:
 this.$ = { type: "DIVISION", left: $$[$0-2], right: $$[$0] } 
break;
case 86:
 this.$ = { type: "AND", left: $$[$0-2], right: $$[$0] } 
break;
case 87:
 this.$ = { type: "OR", left: $$[$0-2], right: $$[$0] } 
break;
case 88: case 89:
 this.$ = { type: "EQUAL_TO", left: $$[$0-2], right: $$[$0] } 
break;
case 90: case 91:
 this.$ = { type: "NOT_EQUAL_TO", left: $$[$0-2], right: $$[$0] } 
break;
case 92:
 this.$ = { type: "LENGTH_OF", expression: $$[$0-1] } 
break;
case 93:
 this.$ = { type: "LESS_THAN", left: $$[$0-2], right: $$[$0] } 
break;
case 94:
 this.$ = { type: "GREATER_THAN", left: $$[$0-2], right: $$[$0] } 
break;
case 95:
 this.$ = { type: "LESS_THAN_EQUAL_TO", left: $$[$0-2], right: $$[$0] } 
break;
case 96:
 this.$ = { type: "GREATER_THAN_EQUAL_TO", left: $$[$0-2], right: $$[$0] } 
break;
case 97:
 this.$ = { type: 'FUNCTION_CALL', name: $$[$0-3], args: $$[$0-1] } 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,25:$V3,29:$V4,31:$V5,32:31,34:$V6,35:$V7,37:$V8,38:$V9,39:50,41:70,44:34,45:49,46:$Va,47:$Vb,48:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{1:[3]},{5:[1,71],6:72,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,25:$V3,29:$V4,31:$V5,32:31,34:$V6,35:$V7,37:$V8,38:$V9,39:50,41:70,44:34,45:49,46:$Va,47:$Vb,48:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},o($Vt,[2,3]),o($Vu,[2,4]),o($Vu,[2,5]),o($Vu,[2,6]),o($Vu,[2,7]),o($Vu,[2,8]),o($Vu,[2,9]),o($Vu,[2,10]),o($Vu,[2,11]),o($Vu,[2,12]),o($Vu,[2,13]),o($Vu,[2,14]),o($Vu,[2,15]),o($Vu,[2,16]),o($Vu,[2,17]),o($Vu,[2,18]),o($Vu,[2,19]),{24:[1,73]},{4:74,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,25:$V3,29:$V4,31:$V5,32:31,34:$V6,35:$V7,37:$V8,38:$V9,39:50,41:70,44:34,45:49,46:$Va,47:$Vb,48:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{25:[1,75]},{25:[1,76]},{25:[1,77]},{24:$Vv,25:$V3,32:78,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{25:[1,80]},{24:$Vw,49:81},{24:$Vw,49:83},{24:[1,84]},{24:[1,85]},{38:[1,86],42:$Vx,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},{38:[1,102]},{38:[1,103]},{28:[1,105],38:[1,104]},o($Vu,[2,47]),o($Vu,[2,48]),o($VM,[2,49]),o($VM,[2,50]),o($VM,[2,51]),o($VN,$VO,{40:[1,106]}),o($VM,[2,53]),o($VM,[2,54]),o($VM,[2,55]),o($VM,[2,56]),{24:$Vv,25:$V3,32:107,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},o($VM,[2,58]),o($VM,[2,59]),o($VM,[2,60]),o($VM,[2,61]),o($VP,[2,34]),{25:[1,108]},o([28,68],$VQ,{60:42,61:43,62:44,63:46,64:47,65:48,45:49,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,66:109,32:110,24:$Vv,25:$V3,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,67:$Vn,69:$Vo,70:$Vp,71:$Vq,93:$Vr,98:$Vs}),{24:[1,111]},o($VM,[2,70]),o($VM,[2,71]),o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,74]),o($VM,[2,75]),o($VM,[2,76]),o($VM,[2,77]),o($VM,[2,78]),o($VM,[2,79]),o($VM,[2,80]),o($VM,[2,81]),{25:[1,112]},{25:[1,113]},{56:[1,114]},{25:[1,115]},o($VP,[2,31]),{1:[2,1]},o($Vt,[2,2]),{25:[1,116]},{6:72,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,25:$V3,29:$V4,30:[1,117],31:$V5,32:31,34:$V6,35:$V7,37:$V8,38:$V9,39:50,41:70,44:34,45:49,46:$Va,47:$Vb,48:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:118,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:119,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:[1,120]},{38:[1,121],42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},o($VM,$VO),{24:$Vv,25:$V3,32:123,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{28:$VS,38:[1,124]},o($VP,[2,41]),{28:$VS,38:[1,126]},{38:[1,127]},{38:[1,128]},o($Vu,[2,44]),{24:$Vv,25:$V3,32:129,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:130,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:131,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:132,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:133,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:134,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:135,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:136,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:137,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:138,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:139,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:140,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:141,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:142,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:143,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},o($Vu,[2,45]),o($Vu,[2,46]),o($Vu,[2,36]),{24:$V2,25:$V3,32:145,39:144,41:70,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:146,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{27:[1,147],42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},{24:$Vv,25:$V3,32:148,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{28:$VT,68:[1,149]},o($VU,[2,63],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL}),{25:[1,151]},{24:$Vv,25:$V3,32:152,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:153,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},o($VM,[2,69]),{24:$Vv,25:$V3,32:154,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},o($VV,$VW,{26:155,24:$VX}),o($Vu,[2,24]),{27:[1,157],42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},{27:[1,158],42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},{29:[1,159]},o($Vu,[2,29]),{24:$Vv,25:$V3,32:160,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{27:[1,161],42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},o($Vu,[2,38]),o($VP,$VW,{26:162,24:$VX}),o($Vu,[2,39]),o($Vu,[2,42]),o($Vu,[2,43]),{42:$VR,43:[1,163],71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},o($VY,[2,82],{42:$VR,85:$VA,86:$VB}),o($VY,[2,83],{42:$VR,85:$VA,86:$VB}),o($VZ,[2,84],{42:$VR}),o($VZ,[2,85],{42:$VR}),o([27,28,36,38,43,68,87,88],[2,86],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL}),o([27,28,36,38,43,68,88],[2,87],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL}),o($V_,[2,88],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB}),o($V_,[2,89],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB}),o($V_,[2,90],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB}),o($V_,[2,91],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB}),o($V$,[2,93],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,89:$VE,90:$VF,91:$VG,92:$VH,96:$VK,97:$VL}),o($V$,[2,94],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,89:$VE,90:$VF,91:$VG,92:$VH,96:$VK,97:$VL}),o($V_,[2,95],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB}),o($V_,[2,96],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB}),o($VP,[2,33]),{42:$Vx,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},o($VP,[2,30],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL}),o($VM,[2,57]),{27:[1,164],42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},o($VM,[2,65]),{24:$Vv,25:$V3,32:165,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},o($VV,$VQ,{60:42,61:43,62:44,63:46,64:47,65:48,45:49,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,32:110,66:166,24:$Vv,25:$V3,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,67:$Vn,69:$Vo,70:$Vp,71:$Vq,93:$Vr,98:$Vs}),{27:[1,167],42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},{27:[1,168],42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},{27:[1,169],42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},{27:[1,170],28:[1,171]},o($V01,[2,22]),{6:172,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,25:$V3,29:$V4,31:$V5,32:31,34:$V6,35:$V7,37:$V8,38:$V9,39:50,41:70,44:34,45:49,46:$Va,47:$Vb,48:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{6:173,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,25:$V3,29:$V4,31:$V5,32:31,34:$V6,35:$V7,37:$V8,38:$V9,39:50,41:70,44:34,45:49,46:$Va,47:$Vb,48:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:174,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{42:$VR,43:[1,175],71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},{38:[1,176]},o($VP,[2,40]),o($VN,$V11,{40:[1,177]}),o($VM,[2,92]),o($VU,[2,62],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL}),{27:[1,178],28:$VT},o($VM,[2,67]),o($VM,[2,68]),o($VM,[2,35]),{6:179,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,25:$V3,29:$V4,31:$V5,32:31,34:$V6,35:$V7,37:$V8,38:$V9,39:50,41:70,44:34,45:49,46:$Va,47:$Vb,48:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:[1,180]},o($Vt,[2,25],{33:[1,181]}),o($Vu,[2,27]),{36:[1,182],42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},o($VM,$V11),o($Vu,[2,37]),{24:$Vv,25:$V3,32:183,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},o($VM,[2,97]),o($Vu,[2,20]),o($V01,[2,21]),{6:184,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,25:$V3,29:$V4,31:$V5,32:31,34:$V6,35:$V7,37:$V8,38:$V9,39:50,41:70,44:34,45:49,46:$Va,47:$Vb,48:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},{24:$Vv,25:$V3,32:185,45:49,46:$Va,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},o($VP,[2,32],{42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL}),o($Vu,[2,26]),{27:[1,186],42:$VR,71:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,94:$VI,95:$VJ,96:$VK,97:$VL},{6:187,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,25:$V3,29:$V4,31:$V5,32:31,34:$V6,35:$V7,37:$V8,38:$V9,39:50,41:70,44:34,45:49,46:$Va,47:$Vb,48:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:42,61:43,62:44,63:46,64:47,65:48,67:$Vn,69:$Vo,70:$Vp,71:$Vq,72:54,73:55,74:56,75:57,76:58,77:59,78:60,79:61,80:62,81:63,82:64,83:65,93:$Vr,98:$Vs},o($Vu,[2,28])],
defaultActions: {71:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "call"
break;
case 2:return "len"
break;
case 3:return "function"
break;
case 4:return "return"
break;
case 5:return "exit"
break;
case 6:return "skip"
break;
case 7:return "while"
break;
case 8:return "from"
break;
case 9:return "to"
break;
case 10:return "reserve"
break;
case 11:return "allocate"
break;
case 12:return "free"
break;
case 13:return "delete"
break;
case 14:return "if"
break;
case 15:return "else"
break;
case 16:return "run"
break;
case 17:return "print"
break;
case 18:return 28
break;
case 19:return 38
break;
case 20:return 85
break;
case 21:return 86
break;
case 22:return 71
break;
case 23:return 84
break;
case 24:return 89
break;
case 25:return 90
break;
case 26:return 91
break;
case 27:return 92
break;
case 28:return 40
break;
case 29:return 69
break;
case 30:return 70
break;
case 31:return 96
break;
case 32:return 97
break;
case 33:return 94
break;
case 34:return 95
break;
case 35:return '@'
break;
case 36:return 87
break;
case 37:return 88
break;
case 38:return 25
break;
case 39:return 27
break;
case 40:return 42
break;
case 41:return 43
break;
case 42:return 67
break;
case 43:return 68
break;
case 44:return 29
break;
case 45:return 30
break;
case 46:return 55
break;
case 47:return 59
break;
case 48:return 58
break;
case 49:return 24
break;
case 50:return 56
break;
case 51:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 57
break;
case 52:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 57
break;
case 53:return 5
break;
case 54:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:call\b)/,/^(?:len\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:exit\b)/,/^(?:skip\b)/,/^(?:while\b)/,/^(?:from\b)/,/^(?:to\b)/,/^(?:reserve\b)/,/^(?:allocate\b)/,/^(?:free\b)/,/^(?:delete\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:run\b)/,/^(?:print\b)/,/^(?:,)/,/^(?:\.)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:==)/,/^(?:is\b)/,/^(?:!=)/,/^(?:isnot\b)/,/^(?:=)/,/^(?:not\b)/,/^(?:!)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:@)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:end\b)/,/^(?:[#][^\n]*)/,/^(?:true|false\b)/,/^(?:empty\b)/,/^(?:[_A-Za-z][_A-Za-z0-9]*)/,/^(?:[-+]?[0-9]+)/,/^(?:[\"][^\"]*[\"])/,/^(?:[\'][^\']*[\'])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}